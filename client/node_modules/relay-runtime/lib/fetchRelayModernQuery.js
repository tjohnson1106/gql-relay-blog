/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict-local
 * @format
 */

'use strict';

/**
 * A helper function to fetch the results of a query. Note that results for
 * fragment spreads are masked: fields must be explicitly listed in the query in
 * order to be accessible in the result object.
 */

function fetchRelayModernQuery(environment, taggedNode, variables, cacheConfig) {
  !environment.unstable_internal ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'fetchRelayModernQuery: Expected a valid Relay environment, got `%s`.', environment) : require('fbjs/lib/invariant')(false) : void 0;
  var _environment$unstable = environment.unstable_internal,
      createOperationSelector = _environment$unstable.createOperationSelector,
      getRequest = _environment$unstable.getRequest;

  var query = getRequest(taggedNode);
  if (query.kind === require('./RelayConcreteNode').BATCH_REQUEST) {
    throw new Error('fetchRelayModernQuery: Batch request not supported in this API.');
  }
  if (query.operationKind !== 'query') {
    throw new Error('fetchRelayModernQuery: Expected query operation');
  }
  var operation = createOperationSelector(query, variables);

  return environment.execute({ operation: operation, cacheConfig: cacheConfig }).map(function () {
    return environment.lookup(operation.fragment).data;
  }).toPromise();
}

module.exports = fetchRelayModernQuery;