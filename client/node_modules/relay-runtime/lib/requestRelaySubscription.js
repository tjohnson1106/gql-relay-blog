/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */

'use strict';

var _extends3 = _interopRequireDefault(require('babel-runtime/helpers/extends'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function requestRelaySubscription(environment, config) {
  var _environment$unstable = environment.unstable_internal,
      createOperationSelector = _environment$unstable.createOperationSelector,
      getRequest = _environment$unstable.getRequest;

  var subscription = getRequest(config.subscription);
  if (subscription.operationKind !== 'subscription') {
    throw new Error('requestRelaySubscription: Must use Subscription operation');
  }
  var configs = config.configs,
      onCompleted = config.onCompleted,
      onError = config.onError,
      onNext = config.onNext,
      variables = config.variables,
      receiveEvents = config.receiveEvents;

  var operation = createOperationSelector(subscription, variables);

  process.env.NODE_ENV !== 'production' ? require('fbjs/lib/warning')(!(config.updater && configs), 'requestRelaySubscription: Expected only one of `updater` and `configs` to be provided') : void 0;

  var _ref = configs ? require('./RelayDeclarativeMutationConfig').convert(configs, subscription, null /* optimisticUpdater */
  , config.updater) : config,
      updater = _ref.updater;

  if (receiveEvents) {
    return environment.executeWithEvents({
      operation: operation,
      updater: updater,
      cacheConfig: { force: true }
    }).subscribeLegacy({
      onNext: function (_onNext) {
        function onNext(_x) {
          return _onNext.apply(this, arguments);
        }

        onNext.toString = function () {
          return _onNext.toString();
        };

        return onNext;
      }(function (payload) {
        if (onNext) {
          if (payload.kind === 'event') {
            onNext(payload);
          } else {
            var data = environment.lookup(operation.fragment).data;
            onNext((0, _extends3['default'])({ kind: 'data' }, data));
          }
        }
      }),
      onError: onError,
      onCompleted: onCompleted
    });
  } else {
    return environment.execute({
      operation: operation,
      updater: updater,
      cacheConfig: { force: true }
    }).map(function () {
      return environment.lookup(operation.fragment).data;
    }).subscribeLegacy({
      onNext: onNext,
      onError: onError,
      onCompleted: onCompleted
    });
  }
}

module.exports = requestRelaySubscription;